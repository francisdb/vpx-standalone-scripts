--- Iron Maiden (Original 2022) VPW 1.0.12.vbs.original	2023-09-04 18:35:06
+++ Iron Maiden (Original 2022) VPW 1.0.12.vbs	2023-09-01 12:59:54
@@ -82,7 +82,7 @@
 
 '*************************** PuP Settings for this table ********************************
 
-usePUP   = true               ' enable Pinup Player functions for this table
+usePUP   = false               ' enable Pinup Player functions for this table
 cPuPPack = "pup-pack_name"    ' name of the PuP-Pack / PuPVideos folder for this table
 
 '**************************
@@ -4388,7 +4388,7 @@
 ' The Player has lost his ball (there are no more balls on the playfield).
 ' Handle any bonus points awarded
 Sub EndOfBall()
-WriteToLog "     ", "EndOfBall:" & Now
+' WriteToLog "     ", "EndOfBall:" & Now
 	pClearEverything2
 	SceneClearLabels
 	DOF 178, DOFpulse 'Drain Effect
@@ -7956,7 +7956,40 @@
 '******************************************************
 '  DROP TARGETS INITIALIZATION
 '******************************************************
+
+Class DropTarget
+	Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+	Public Property Let Secondary(input): Set m_secondary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
 
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
+  
+	Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+	Public Property Let IsDropped(input): m_isDropped = input: End Property
+  
+	Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+	  Set m_primary = primary
+	  Set m_secondary = secondary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
+	  m_isDropped = isDropped
+  
+	  Set Init = Me
+	End Function
+  End Class
+
 'Define a variable for each drop target
 Dim DT1, DT2, DT3
 
@@ -7976,9 +8009,9 @@
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 
-DT1 = Array(Target004, Target004a, Target004p, 1, 0)
-DT2 = Array(Target005, Target005a, Target005p, 2, 0)
-DT3 = Array(Target006, Target006a, Target006p, 3, 0)
+Set DT1 = (new DropTarget)(Target004, Target004a, Target004p, 1, 0, false)
+Set DT2 = (new DropTarget)(Target005, Target005a, Target005p, 2, 0, false)
+Set DT3 = (new DropTarget)(Target006, Target006a, Target006p, 3, 0, false)
 
 
 Dim DTArray
@@ -8027,9 +8060,9 @@
 	DTArray_IsDropped(i)=1
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 'WriteToLog "     ", "DTHit:(" & i & ") " & DTArray(i)(4)
 	DoDTAnim
@@ -8042,7 +8075,7 @@
 	i = DTArrayID(switch)
 	DTArray_IsDropped(i)=0
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -8051,14 +8084,14 @@
 	i = DTArrayID(switch)
 	DTArray_IsDropped(i)=1
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -8117,7 +8150,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary 	,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -8360,7 +8393,7 @@
     MyLamp.TimerEnabled = 0
     MyLamp.TimerEnabled = 1
 'WriteToLog "     ", "Sub " & MyLamp.Name & "_Timer:" & "SetLamp (me.UserValue - INT(me.UserValue))*100, me.UserValue MOD 2:me.UserValue= me.UserValue -1:If me.UserValue < 0 then Me.TimerEnabled=0:End If:End Sub"
-    ExecuteGlobal "Sub " & MyLamp.Name & "_Timer:" & "SetLamp (" & MyLamp.Name & ".UserValue - INT(" & MyLamp.Name & ".UserValue))*100, " & MyLamp.Name & ".UserValue MOD 2:" & MyLamp.Name & ".UserValue= " & MyLamp.Name & ".UserValue -1:If " & MyLamp.Name & ".UserValue < 0 then " & MyLamp.Name & ".TimerEnabled=0:End If:End Sub"
+	ExecuteGlobal "Sub " & MyLamp.Name & "_Timer:" & "SetLamp ((" & MyLamp.Name & ".UserValue - INT(" & MyLamp.Name & ".UserValue))*100), " & MyLamp.Name & ".UserValue MOD 2:" & MyLamp.Name & ".UserValue= " & MyLamp.Name & ".UserValue -1:If " & MyLamp.Name & ".UserValue < 0 then " & MyLamp.Name & ".TimerEnabled=0:End If:End Sub"
 End Sub
 
 Sub SetLamp(nr, value) ' 0 is off, 1 is on
@@ -8601,8 +8634,8 @@
 	if TypeName(n)="LightDummy" then exit sub 	' Fake Light, cant set the color 
 WriteToLog "     ", "SetLightColorTimed:" & n.name & " " & col
 	dim vL, pL
-	Execute "set vL=v" & n.name
-	Execute "set pL=p" & n.name
+	set vL = eval("v" & n.name)
+	set pL = eval("p" & n.name)
 
 	'UpdateMaterial(string, float wrapLighting, float roughness, float glossyImageLerp, float thickness, float edge, float edgeAlpha, float opacity, OLE_COLOR base, OLE_COLOR glossy, OLE_COLOR clearcoat, VARIANT_BOOL isMetal, VARIANT_BOOL opacityActive, float elasticity, float elasticityFalloff, float friction, float scatterAngle)
 
@@ -14019,7 +14052,7 @@
 
 		if bDropSweep then 
 			bDropSweep=False
-			CheckDrops (tgtIndex+1) Mod 3
+			CheckDrops ((tgtIndex+1) Mod 3)
 		else 
 			vpmtimer.addtimer 1000, "ResetDrop '"
 		End if 
@@ -20851,7 +20884,7 @@
 Function getQueueTime(queueIdx)		' Returns how much time left on queue
 	Dim time,i 
 	time = 0
-WriteToLog "     ", "GetQueueTime: (" & queueIdx &") " & now 
+' WriteToLog "     ", "GetQueueTime: (" & queueIdx &") " & now 
 WriteToLog "     ", "GetQueueTime:" & QueueCurrentTime(queueIdx) & " " & QueueActive(queueIdx)
 	if QueueActive(queueIdx) and QueueCurrentTime(queueIdx) <> 0 then time = (DateDiff("s", now, QueueCurrentTime(queueIdx)) * 1000)
 WriteToLog "     ", "GetQueueTime Active:" & time
@@ -20943,6 +20976,7 @@
 End Sub
 
 Sub RunQueue(queueIdx, bNewItem)
+	exit Sub
 	dim qCmd, qTime
 WriteToLog "     ", "Run Queue " &  queueIdx & " " & QueueActive(queueIdx) & " " & bNewItem & " " & Now
 	if QueueActive(queueIdx) = False or bNewItem=False then 	' Nothing is running Or we just finished running something 
@@ -22630,6 +22664,7 @@
 	End Sub
 			
 	sub playclear(chan)
+		if usePUP = False then Exit Sub 
 		WriteToLog "     ", "play clear'd " & chan
 		bMediaSet(chan) = False
 		bMediaPaused(chan) = False
