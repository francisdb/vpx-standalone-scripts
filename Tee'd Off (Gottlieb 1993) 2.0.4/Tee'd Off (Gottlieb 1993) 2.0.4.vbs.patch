--- "Tee'd Off (Gottlieb 1993) 2.0.4.vbs.original"	2023-11-20 11:45:25.307715962 +0100
+++ "Tee'd Off (Gottlieb 1993) 2.0.4.vbs"	2023-11-20 11:41:19.453484468 +0100
@@ -788,6 +788,39 @@
 '		DROP TARGETS INITIALIZATION
 '******************************************************
 
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 Dim DT7, DT27, DT37, DT17
 
@@ -808,10 +841,10 @@
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 
 ' Center Bank
-DT7 = Array(dt1, dt1a, pdt1, 7, 0)
-DT27 = Array(dt2, dt2a, pdt2, 27, 0)
-DT37 = Array(dt3, dt3a, pdt3, 37, 0)
-DT17 = Array(dt4, dt4a, pdt4, 17, 0)
+Set DT7 = (new DropTarget)(dt1, dt1a, pdt1, 7, 0, false)
+Set DT27 = (new DropTarget)(dt2, dt2a, pdt2, 27, 0, false)
+Set DT37 = (new DropTarget)(dt3, dt3a, pdt3, 37, 0, false)
+Set DT17 = (new DropTarget)(dt4, dt4a, pdt4, 17, 0, false)
 
 'Add all the Drop Target Arrays to Drop Target Animation Array
 ' DTAnimationArray = Array(DT1, DT2, ....)
@@ -844,9 +877,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -855,7 +888,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -863,14 +896,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -923,7 +956,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -1139,6 +1172,31 @@
 '		STAND-UP TARGET INITIALIZATION
 '******************************************************
 
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each stand-up target
 Dim ST83, ST91, ST92, ST101, ST102, ST103, ST111, ST112
 
@@ -1152,14 +1210,14 @@
 '	switch:				ROM switch number
 '	animate:			Arrary slot for handling the animation instrucitons, set to 0
 
-ST83 = Array(sw83, psw83,83, 0)
-ST91 = Array(sw91, psw91,91, 0)
-ST92 = Array(sw92, psw92,92, 0)
-ST101 = Array(sw101, psw101,101, 0)
-ST102 = Array(sw102, psw102,102, 0)
-ST103 = Array(sw103, psw103,103, 0)
-ST111 = Array(sw111, psw111,111, 0)
-ST112 = Array(sw112, psw112,112, 0)
+Set ST83 = (new StandupTarget)(sw83, psw83,83, 0)
+Set ST91 = (new StandupTarget)(sw91, psw91,91, 0)
+Set ST92 = (new StandupTarget)(sw92, psw92,92, 0)
+Set ST101 = (new StandupTarget)(sw101, psw101,101, 0)
+Set ST102 = (new StandupTarget)(sw102, psw102,102, 0)
+Set ST103 = (new StandupTarget)(sw103, psw103,103, 0)
+Set ST111 = (new StandupTarget)(sw111, psw111,111, 0)
+Set ST112 = (new StandupTarget)(sw112, psw112,112, 0)
 
 
 'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
@@ -1183,10 +1241,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
@@ -1194,7 +1252,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -1223,7 +1281,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
@@ -2129,7 +2187,7 @@
 		For each ii in Rswitches:Controller.switch(ii)=0:next
 		roulettesw.enabled = false
 		For ii = 0 to 11
-			GWHoles(ii).kick (ii+1)*30+60, (rnd(4))+12
+			GWHoles(ii).kick 30*(ii+1)+60, (rnd(4))+12
 			'GWHoles(ii).enabled = false
 		Next			
 		GWRamp.collidable = 1
