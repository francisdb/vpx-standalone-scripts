Option Explicit
Randomize

On Error Resume Next
ExecuteGlobal GetTextFile("controller.vbs")
If Err Then MsgBox "You need the controller.vbs in order to run this table, available in the vp10 package"
On Error Goto 0

'----- FlexDMD Options -----
Dim UseFlexDMD:UseFlexDMD = 1		' 1 = on, 0 = off (Non VRRoom only. Intended for Real DMD users but will work on LCD)
Const FlexColour = 0				' 0 = red (default), 1 = yellow, 2 = Green, 3 = blue, 4 = white

Const cGameName="simp_a27",UseSolenoids=2,UseLamps=0,UseGI=0,SSolenoidOn="SolOn",SSolenoidOff="SolOff", SCoin="coin"

LoadVPM "01000200", "DE.VBS", 3.36                  

Dim DesktopMode: DesktopMode = Table1.ShowDT
If DesktopMode = True Then 'Show Desktop components
Ramp16.visible=1
Ramp15.visible=1
Primitive13.visible=1
Else
Ramp16.visible=0
Ramp15.visible=0
Primitive13.visible=0
End if

'*************************************************************
'Solenoid Call backs
'**********************************************************************************************************
Solcallback(1) =		"SetLamp 101," '1A
Solcallback(2) =		"SetLamp 102," '2A
Solcallback(3) =		"SetLamp 103," '3A
Solcallback(4) =		"SetLamp 104," '4A
Solcallback(5) =		"SetLamp 105," '5A
Solcallback(6) =		"SetLamp 106," '6A
SolCallback(7) =		"SetLamp 107," '7A
'SolCallback(8) =		"SetLamp 108," '8A Backglass only
Solcallback(9) =		"SetLamp 109," '9A
solcallback(11) =		"PFGI"
SolCallback(12) =		"SetLamp 112,"	
SolCallback(13) =		"SetLamp 113,"
SolCallback(14) =		"SetLamp 114,"
SolCallback(15) =		"SetLamp 115,"
SolCallBack(16)	=		"kicksaver"
SolCallback(22) =		"dtrDrop.SolDropUp" 'Drop Targets
SolCallback(25) =		"bsTrough.SolIn"
SolCallback(26) =		"bsTrough.SolOut"
Solcallback(27) =		"bsSaucer.solout"
solcallback(28) =		"sw29Pop"
Solcallback(30) =		"sw37Pop"
SolCallback(31)	=		"dtCDrop.SolDropUp" 'Drop Targets
SolCallback(32) =		"vpmSolSound SoundFX(""Knocker"",DOFKnocker),"

SolCallback(sLRFlipper) = "SolRFlipper"
SolCallback(sLLFlipper) = "SolLFlipper"

Sub SolLFlipper(Enabled)
     If Enabled Then
         PlaySound SoundFX("fx_Flipperup",DOFContactors):LeftFlipper.RotateToEnd
     Else
         PlaySound SoundFX("fx_Flipperdown",DOFContactors):LeftFlipper.RotateToStart
     End If
  End Sub
  
Sub SolRFlipper(Enabled)
     If Enabled Then
         PlaySound SoundFX("fx_Flipperup",DOFContactors):RightFlipper.RotateToEnd
     Else
         PlaySound SoundFX("fx_Flipperdown",DOFContactors):RightFlipper.RotateToStart
     End If
End Sub
'**********************************************************************************************************

'Solenoid Controlled toys
'**********************************************************************************************************

Sub kicksaver(Enabled)
	If Enabled Then 
		Plunger1.fire
        PlaySound SoundFX("Popper",DOFContactors)
	Else
		Plunger1.pullback
	End If
End Sub

'Playfield GI
Sub PFGI(Enabled)
	If Enabled Then
		dim xx
		For each xx in GI:xx.State = 0: Next
        PlaySound "fx_relay"
Primitive25.blenddisablelighting = 0.07
Table1.colorgradeimage = "ColorGrade_3"
	Else
		For each xx in GI:xx.State = 1: Next
        PlaySound "fx_relay"
Primitive25.blenddisablelighting = 0.18
Table1.colorgradeimage = "ColorGradeLUT256x16_extraConSat"
	End If
End Sub

'**********************************************************************************************************

'Initiate Table
'**********************************************************************************************************

Dim bsTrough, bsSaucer, dtCDrop, dtRDrop

Sub Table1_Init

	' initalise the FlexDMD display
    If UseFlexDMD Then FlexDMD_Init
	If UseFlexDMD Then ExternalEnabled = Controller.Games(cGameName).Settings.Value("showpindmd")
	If UseFlexDMD Then Controller.Games(cGameName).Settings.Value("showpindmd") = 0

	vpmInit Me

	On Error Resume Next
		With Controller
		.GameName = cGameName
		If Err Then MsgBox "Can't start Game" & cGameName & vbNewLine & Err.Description : Exit Sub
		.SplashInfoLine = "The Simpsons (Data East 1990)"&chr(13)&"You Suck"
		.HandleMechanics=0
		.HandleKeyboard=0
		.ShowDMDOnly=1
		.ShowFrame=0
		.ShowTitle=0
		.hidden = 0
         On Error Resume Next
         .Run GetPlayerHWnd
         If Err Then MsgBox Err.Description
         On Error Goto 0
     End With
     On Error Goto 0

	PinMAMETimer.Interval=PinMAMEInterval
	PinMAMETimer.Enabled=1

    vpmNudge.TiltSwitch=1
	vpmNudge.Sensitivity=2
	vpmNudge.TiltObj=Array(Bumper1,Bumper2,Bumper3,LeftSlingshot,RightSlingshot)

	Set bsTrough = New cvpmBallStack
	    bsTrough.InitSw 10,11,12,13,0,0,0,0
	    bsTrough.InitKick BallRelease, 70, 10
	    bsTrough.InitExitSnd SoundFX("ballrelease",DOFContactors), SoundFX("Solenoid",DOFContactors)
	    bsTrough.Balls = 3

    Set bsSaucer = new cvpmBallStack
		bsSaucer.InitSaucer Sw28, 28, 140, 10
		bsSaucer.InitExitSnd SoundFX("ballrelease",DOFContactors), SoundFX("Solenoid",DOFContactors)

    Set dtCDrop = new cvpmDropTarget
	    dtCDrop.Initdrop Array(Sw33,Sw34,Sw35), Array(33,34,35)
	    dtCDrop.InitSnd SoundFX("DTDrop",DOFContactors),SoundFX("DTReset",DOFContactors)

    Set dtRDrop = new cvpmDropTarget
	    dtRDrop.Initdrop Array(Sw41,Sw42,Sw43,Sw44,Sw45), Array(41,42,43,44,45)
	    dtRDrop.InitSnd SoundFX("DTDrop",DOFContactors),SoundFX("DTReset",DOFContactors)
    
	Plunger1.pullback




End sub

'**********************************************************************************************************
'Plunger code
'**********************************************************************************************************

Sub Table1_KeyDown(ByVal KeyCode)

	If KeyDownHandler(keycode) Then Exit Sub
	If keycode = PlungerKey Then Plunger.Pullback:playsound"plungerpull"
	If keycode = LeftFlipperKey Then  Controller.Switch(15) = False  End If
 	If keycode = RightFlipperKey Then	Controller.Switch(16) = False End If	

End Sub

Sub Table1_KeyUp(ByVal KeyCode)
	If KeyUpHandler(keycode) Then Exit Sub
	If keycode = PlungerKey Then Plunger.Fire:PlaySound"plunger"
	If keycode = LeftFlipperKey Then  Controller.Switch(15) = True End If
	If keycode = RightFlipperKey Then	Controller.Switch(16) = True End If

End Sub

'**********************************************************************************************************

 ' Drain hole and kickers
Sub Drain_Hit:bsTrough.addball me : playsound"drain" : End Sub
Sub Sw28_Hit:bsSaucer.AddBall 0 : playsound"popper_ball" : End Sub

 '***********************************
 'sw29 Raising VUK 
 '***********************************
 'Variables used for VUK 
 Dim raiseballsw, raiseball 

 Sub sw29_Hit() 
 	sw29.Enabled=FALSE
	Controller.switch (29) = True
	playsound "popper_ball"
 End Sub
 
 Sub sw29Pop(enabled)
	if(enabled and Controller.switch (29)) then
 		 playsound SoundFX("Popper",DOFContactors)
		sw29.DestroyBall
 		Set raiseball = sw29.CreateBall
 		raiseballsw = True
 		sw29raiseballtimer.Enabled = True 'Added by Rascal
		sw29.Enabled=TRUE	
 		Controller.switch (29) = False
	else

	end if
End Sub
 
 Sub sw29raiseballtimer_Timer()
 	If raiseballsw = True then
 		raiseball.z = raiseball.z + 10
 		If raiseball.z > 190 then
 			sw29.Kick 145, 10
 			Set raiseball = Nothing
 			sw29raiseballtimer.Enabled = False
 			raiseballsw = False
 		End If
 	End If
 End Sub

 '***********************************
 'sw37 Raising VUK 
 '***********************************
 'Variables used for VUK 
 Dim raise1ballsw, raise1ball 

 Sub sw37_Hit() 
 	sw37.Enabled=FALSE
	Controller.switch (37) = True
	playsound "popper_ball"
 End Sub
 
 Sub sw37Pop(enabled)
	if(enabled and Controller.switch (37)) then
 		 playsound SoundFX("Popper",DOFContactors)
		sw37.DestroyBall
 		Set raise1ball = sw37.CreateBall
 		raise1ballsw = True
 		sw37raiseballtimer.Enabled = True 'Added by Rascal
		sw37.Enabled=TRUE	
 		Controller.switch (37) = False
	else

	end if
End Sub
 
 Sub sw37raiseballtimer_Timer()
 	If raise1ballsw = True then
 		raise1ball.z = raise1ball.z + 10
 		If raise1ball.z > 210 then
 			sw37.Kick 90, 10
 			Set raise1ball = Nothing
 			sw37raiseballtimer.Enabled = False
 			raise1ballsw = False
 		End If
 	End If
 End Sub

 '***********************************
 '***********************************

'Drop Targets
Sub Sw33_Dropped:dtCDrop.Hit 1 :End Sub  
Sub Sw34_Dropped:dtCDrop.Hit 2 :End Sub  
Sub Sw35_Dropped:dtCDrop.Hit 3 :End Sub

Sub Sw41_Dropped:dtRDrop.Hit 1 :End Sub
Sub Sw42_Dropped:dtRDrop.Hit 2 :End Sub
Sub Sw43_Dropped:dtRDrop.Hit 3 :End Sub
Sub Sw44_Dropped:dtRDrop.Hit 4 :End Sub
Sub Sw45_Dropped:dtRDrop.Hit 5 :End Sub

'Wire Triggers
Sub SW14_Hit:Controller.Switch(14)=1 : playsound"rollover" : End Sub 
Sub SW14_unHit:Controller.Switch(14)=0:End Sub
Sub SW17_Hit:Controller.Switch(17)=1 : playsound"rollover" : End Sub 
Sub SW17_unHit:Controller.Switch(17)=0:End Sub
Sub SW18_Hit:Controller.Switch(18)=1 : playsound"rollover" : End Sub 
Sub SW18_unHit:Controller.Switch(18)=0:End Sub
Sub SW19_Hit:Controller.Switch(19)=1 : playsound"rollover" : End Sub 
Sub SW19_unHit:Controller.Switch(19)=0:End Sub
Sub SW20_Hit:Controller.Switch(20)=1 : playsound"rollover" : End Sub 
Sub SW20_unHit:Controller.Switch(20)=0:End Sub
Sub SW30_Hit:Controller.Switch(30)=1 : playsound"rollover" : End Sub 
Sub SW30_unHit:Controller.Switch(30)=0:End Sub
Sub SW49_Hit:Controller.Switch(49)=1 : playsound"rollover" : End Sub
Sub SW49_unHit:Controller.Switch(49)=0:End Sub
Sub SW50_Hit:Controller.Switch(50)=1 : playsound"rollover" : End Sub
Sub SW50_unHit:Controller.Switch(50)=0:End Sub
Sub SW51_Hit:Controller.Switch(51)=1 : playsound"rollover" : End Sub
Sub SW51_unHit:Controller.Switch(51)=0:End Sub

 'Stand Up Targets
Sub sw25_hit:vpmTimer.pulseSw 25 : End Sub 
Sub sw26_hit:vpmTimer.pulseSw 26 : End Sub 
Sub sw27_hit:vpmTimer.pulseSw 27 : End Sub 

'Spinners
Sub sw36_Spin:vpmTimer.PulseSw 36 : playsound"fx_spinner" : End Sub

'Ramp Gate Triggers
Sub sw38_hit:vpmTimer.pulseSw 38 : End Sub 
Sub sw39_hit:vpmTimer.pulseSw 39 : End Sub 

'Bumpers
Sub Bumper1_Hit : vpmTimer.PulseSw 46 : Sw46p.transz = +10  : Me.TimerEnabled = 1 : playsound SoundFX("fx_bumper1",DOFContactors): End Sub
Sub Bumper1_Timer : Sw46p.transz = 0 : Me.TimerEnabled = 0 : End Sub

Sub Bumper2_Hit : vpmTimer.PulseSw 47 : Sw47p.transz = +10  : Me.TimerEnabled = 1 : playsound SoundFX("fx_bumper1",DOFContactors): End Sub
Sub Bumper2_Timer : Sw47p.transz = 0 : Me.TimerEnabled = 0 : End Sub

Sub Bumper3_Hit : vpmTimer.PulseSw 48 : Sw48p.transz = +10  : Me.TimerEnabled = 1 : playsound SoundFX("fx_bumper1",DOFContactors): End Sub
Sub Bumper3_Timer : Sw48p.transz = 0 : Me.TimerEnabled = 0 : End Sub


'***************************************************
'       JP's VP10 Fading Lamps & Flashers
'       Based on PD's Fading Light System
' SetLamp 0 is Off
' SetLamp 1 is On
' fading for non opacity objects is 4 steps
'***************************************************

Dim LampState(200), FadingLevel(200)
Dim FlashSpeedUp(200), FlashSpeedDown(200), FlashMin(200), FlashMax(200), FlashLevel(200)

InitLamps()             ' turn off the lights and flashers and reset them to the default parameters
LampTimer.Interval = 5 'lamp fading speed
LampTimer.Enabled = 1

' Lamp & Flasher Timers

Sub LampTimer_Timer()
    Dim chgLamp, num, chg, ii
    chgLamp = Controller.ChangedLamps
    If Not IsEmpty(chgLamp) Then
        For ii = 0 To UBound(chgLamp)
            LampState(chgLamp(ii, 0) ) = chgLamp(ii, 1)       'keep the real state in an array
            FadingLevel(chgLamp(ii, 0) ) = chgLamp(ii, 1) + 4 'actual fading step

	   'Special Handling
	   'If chgLamp(ii,0) = 2 Then solTrough chgLamp(ii,1)
	   'If chgLamp(ii,0) = 4 Then PFGI chgLamp(ii,1)

        Next
    End If
    UpdateLamps
End Sub


Sub UpdateLamps()
   NFadeLm 1, L1 'Left Bumper
   NFadeL 1, L1a
   NFadeLm 2, L2 'Lower Bumper Tower
   NFadeL 2, L2a
   NFadeLm 3, L3 'Right Bumper Tower
   NFadeL 3, L3a
   NFadeL 4, L4
   NFadeL 5, L5
   NFadeL 6, L6
   NFadeL 7, L7
   NFadeL 8, L8
   NFadeL 9, L9
   NFadeL 10, L10
   NFadeL 11, L11
'   NFadeL 12, L12
   NFadeL 13, L13
   NFadeL 14, L14
   NFadeL 15, L15
   NFadeL 16, L16
   Flash 17, F17 'BackWall Millions
   Flash 18, F18 'BackWall Millions
   Flash 19, F19 'BackWall Millions
   Flash 20, F20 'BackWall Millions
   Flash 21, F21 'BackWall Millions
   Flash 22, F22 'BackWall Millions
   Flash 23, F23 'BackWall Millions
   Flash 24, F24 'BackWall Millions
   NFadeL 25, L25
   NFadeL 26, L26
   NFadeL 27, L27
   NFadeL 28, L28
   NFadeL 29, L29
   NFadeL 30, L30
   NFadeL 31, L31
   NFadeL 32, L32
   NFadeL 33, L33
   NFadeL 34, L34
   NFadeL 35, L35
   NFadeL 36, L36
   NFadeL 37, L37
   NFadeL 38, L38
   NFadeL 39, L39
   NFadeL 40, L40
   NFadeL 41, L41
   NFadeL 42, L42
   NFadeL 43, L43
   NFadeL 44, L44

   NFadeObjm 49, P49, "bulbcover1_redON", "bulbcover1_red"
'   Flash 49, F49 ' Ramp LED
NFadeL 49, F49
  NFadeL 50, L50
   NFadeObjm 51, P51, "bulbcover1_greenON", "bulbcover1_green"
'   Flash 51, F51  ' Ramp LED
NFadeL 51, F51
 
   NFadeL 52, L52

   NFadeL 55, L55
   NFadeL 56, L56
   NFadeL 57, L57
   NFadeL 58, L58
   NFadeL 59, L59
   NFadeL 60, L60
   NFadeL 61, L61
   NFadeL 62, L62
   NFadeL 63, L63
   NFadeL 64, L64

'Solenoid Controlled Lights

   NFadeL 101, S101
   NFadeL 102, S102
   NFadeObjm 103, P103, "dome2_0_yellowON", "dome2_0_yellow"
   NFadeLm 103, S103a
NFadeLm 103, S103b
   NFadeL 103, S103
   NFadeObjm 104, P104, "dome2_0_yellowON", "dome2_0_yellow"
   NFadeLm 104, S104a
NFadeLm 104, S104b
   NFadeL 104, S104
   NFadeObjm 105, P105, "dome2_0_redON", "dome2_0_red"
   NFadeLm 105, S105a
NFadeLm 105, S105b
   NFadeL 105, S105
   NFadeObjm 106, P106, "dome2_0_yellowON", "dome2_0_yellow"
   NFadeLm 106, S106a
NFadeLm 106, S106b
   NFadeL 106, S106
   NFadeObjm 107, P107, "dome2_0_redON", "dome2_0_red"
   NFadeLm 107, S107a
NFadeLm 107, S107b
   NFadeL 107, S107
   NFadeL 108, S108
   NFadeLm 109, S109
   NFadeLm 109, S109a
   NFadeL 109, S109b
   NFadeLm 112, S112
   NFadeLm 112, S112a
   NFadeL 112, S112b
   NFadeL 113, S113
   NFadeLm 114, S114a
   NFadeLm 114, S114b
   Flash 114, S114c 'Backwall
   NFadeLm 115, S115a
   NFadeLm 115, S115b
   NFadeLm 115, S115c
   NFadeL 115, S115d
   
End Sub

' div lamp subs

Sub InitLamps()
    Dim x
    For x = 0 to 200
        LampState(x) = 0        ' current light state, independent of the fading level. 0 is off and 1 is on
        FadingLevel(x) = 4      ' used to track the fading state
        FlashSpeedUp(x) = 0.4   ' faster speed when turning on the flasher
        FlashSpeedDown(x) = 0.2 ' slower speed when turning off the flasher
        FlashMax(x) = 1         ' the maximum value when on, usually 1
        FlashMin(x) = 0         ' the minimum value when off, usually 0
        FlashLevel(x) = 0       ' the intensity of the flashers, usually from 0 to 1
    Next
End Sub

Sub AllLampsOff
    Dim x
    For x = 0 to 200
        SetLamp x, 0
    Next
End Sub

Sub SetLamp(nr, value)
    If value <> LampState(nr) Then
        LampState(nr) = abs(value)
        FadingLevel(nr) = abs(value) + 4
    End If
End Sub

' Lights: used for VP10 standard lights, the fading is handled by VP itself

Sub NFadeL(nr, object)
    Select Case FadingLevel(nr)
        Case 4:object.state = 0:FadingLevel(nr) = 0
        Case 5:object.state = 1:FadingLevel(nr) = 1
    End Select
End Sub

Sub NFadeLm(nr, object) ' used for multiple lights
    Select Case FadingLevel(nr)
        Case 4:object.state = 0
        Case 5:object.state = 1
    End Select
End Sub

'Lights, Ramps & Primitives used as 4 step fading lights
'a,b,c,d are the images used from on to off

Sub FadeObj(nr, object, a, b, c, d)
    Select Case FadingLevel(nr)
        Case 4:object.image = b:FadingLevel(nr) = 6                   'fading to off...
        Case 5:object.image = a:FadingLevel(nr) = 1                   'ON
        Case 6, 7, 8:FadingLevel(nr) = FadingLevel(nr) + 1             'wait
        Case 9:object.image = c:FadingLevel(nr) = FadingLevel(nr) + 1 'fading...
        Case 10, 11, 12:FadingLevel(nr) = FadingLevel(nr) + 1         'wait
        Case 13:object.image = d:FadingLevel(nr) = 0                  'Off
    End Select
End Sub

Sub FadeObjm(nr, object, a, b, c, d)
    Select Case FadingLevel(nr)
        Case 4:object.image = b
        Case 5:object.image = a
        Case 9:object.image = c
        Case 13:object.image = d
    End Select
End Sub

Sub NFadeObj(nr, object, a, b)
    Select Case FadingLevel(nr)
        Case 4:object.image = b:FadingLevel(nr) = 0 'off
        Case 5:object.image = a:FadingLevel(nr) = 1 'on
    End Select
End Sub

Sub NFadeObjm(nr, object, a, b)
    Select Case FadingLevel(nr)
        Case 4:object.image = b
        Case 5:object.image = a
    End Select
End Sub

' Flasher objects

Sub Flash(nr, object)
    Select Case FadingLevel(nr)
        Case 4 'off
            FlashLevel(nr) = FlashLevel(nr) - FlashSpeedDown(nr)
            If FlashLevel(nr) < FlashMin(nr) Then
                FlashLevel(nr) = FlashMin(nr)
                FadingLevel(nr) = 0 'completely off
            End if
            Object.IntensityScale = FlashLevel(nr)
        Case 5 ' on
            FlashLevel(nr) = FlashLevel(nr) + FlashSpeedUp(nr)
            If FlashLevel(nr) > FlashMax(nr) Then
                FlashLevel(nr) = FlashMax(nr)
                FadingLevel(nr) = 1 'completely on
            End if
            Object.IntensityScale = FlashLevel(nr)
    End Select
End Sub

Sub Flashm(nr, object) 'multiple flashers, it just sets the flashlevel
    Object.IntensityScale = FlashLevel(nr)
End Sub

'**********************************************************************************************************
'Digital Display
'**********************************************************************************************************
 Dim Digits(32)
 Digits(0)=Array(a00, a05, a0c, a0d, a08, a01, a06, a0f, a02, a03, a04, a07, a0b, a0a, a09, a0e)
 Digits(1)=Array(a10, a15, a1c, a1d, a18, a11, a16, a1f, a12, a13, a14, a17, a1b, a1a, a19, a1e)
 Digits(2)=Array(a20, a25, a2c, a2d, a28, a21, a26, a2f, a22, a23, a24, a27, a2b, a2a, a29, a2e)
 Digits(3)=Array(a30, a35, a3c, a3d, a38, a31, a36, a3f, a32, a33, a34, a37, a3b, a3a, a39, a3e)
 Digits(4)=Array(a40, a45, a4c, a4d, a48, a41, a46, a4f, a42, a43, a44, a47, a4b, a4a, a49, a4e)
 Digits(5)=Array(a50, a55, a5c, a5d, a58, a51, a56, a5f, a52, a53, a54, a57, a5b, a5a, a59, a5e)
 Digits(6)=Array(a60, a65, a6c, a6d, a68, a61, a66, a6f, a62, a63, a64, a67, a6b, a6a, a69, a6e)
 Digits(7)=Array(a70, a75, a7c, a7d, a78, a71, a76, a7f, a72, a73, a74, a77, a7b, a7a, a79, a7e)
 Digits(8)=Array(a80, a85, a8c, a8d, a88, a81, a86, a8f, a82, a83, a84, a87, a8b, a8a, a89, a8e)
 Digits(9)=Array(a90, a95, a9c, a9d, a98, a91, a96, a9f, a92, a93, a94, a97, a9b, a9a, a99, a9e)
 Digits(10)=Array(aa0, aa5, aac, aad, aa8, aa1, aa6, aaf, aa2, aa3, aa4, aa7, aab, aaa, aa9, aae)
 Digits(11)=Array(ab0, ab5, abc, abd, ab8, ab1, ab6, abf, ab2, ab3, ab4, ab7, abb, aba, ab9, abe)
 Digits(12)=Array(ac0, ac5, acc, acd, ac8, ac1, ac6, acf, ac2, ac3, ac4, ac7, acb, aca, ac9, ace)
 Digits(13)=Array(ad0, ad5, adc, add, ad8, ad1, ad6, adf, ad2, ad3, ad4, ad7, adb, ada, ad9, ade)
 Digits(14)=Array(ae0, ae5, aec, aed, ae8, ae1, ae6, aef, ae2, ae3, ae4, ae7, aeb, aea, ae9, aee)
 Digits(15)=Array(af0, af5, afc, afd, af8, af1, af6, aff, af2, af3, af4, af7, afb, afa, af9, afe)
 
 Digits(16)=Array(b00, b05, b0c, b0d, b08, b01, b06, b0f, b02, b03, b04, b07, b0b, b0a, b09, b0e)
 Digits(17)=Array(b10, b15, b1c, b1d, b18, b11, b16, b1f, b12, b13, b14, b17, b1b, b1a, b19, b1e)
 Digits(18)=Array(b20, b25, b2c, b2d, b28, b21, b26, b2f, b22, b23, b24, b27, b2b, b2a, b29, b2e)
 Digits(19)=Array(b30, b35, b3c, b3d, b38, b31, b36, b3f, b32, b33, b34, b37, b3b, b3a, b39, b3e)
 Digits(20)=Array(b40, b45, b4c, b4d, b48, b41, b46, b4f, b42, b43, b44, b47, b4b, b4a, b49, b4e)
 Digits(21)=Array(b50, b55, b5c, b5d, b58, b51, b56, b5f, b52, b53, b54, b57, b5b, b5a, b59, b5e)
 Digits(22)=Array(b60, b65, b6c, b6d, b68, b61, b66, b6f, b62, b63, b64, b67, b6b, b6a, b69, b6e)
 Digits(23)=Array(b70, b75, b7c, b7d, b78, b71, b76, b7f, b72, b73, b74, b77, b7b, b7a, b79, b7e)
 Digits(24)=Array(b80, b85, b8c, b8d, b88, b81, b86, b8f, b82, b83, b84, b87, b8b, b8a, b89, b8e)
 Digits(25)=Array(b90, b95, b9c, b9d, b98, b91, b96, b9f, b92, b93, b94, b97, b9b, b9a, b99, b9e)
 Digits(26)=Array(ba0, ba5, bac, bad, ba8, ba1, ba6, baf, ba2, ba3, ba4, ba7, bab, baa, ba9, bae)
 Digits(27)=Array(bb0, bb5, bbc, bbd, bb8, bb1, bb6, bbf, bb2, bb3, bb4, bb7, bbb, bba, bb9, bbe)
 Digits(28)=Array(bc0, bc5, bcc, bcd, bc8, bc1, bc6, bcf, bc2, bc3, bc4, bc7, bcb, bca, bc9, bce)
 Digits(29)=Array(bd0, bd5, bdc, bdd, bd8, bd1, bd6, bdf, bd2, bd3, bd4, bd7, bdb, bda, bd9, bde)
 Digits(30)=Array(be0, be5, bec, bed, be8, be1, be6, bef, be2, be3, be4, be7, beb, bea, be9, bee)
 Digits(31)=Array(bf0, bf5, bfc, bfd, bf8, bf1, bf6, bff, bf2, bf3, bf4, bf7, bfb, bfa, bf9, bfe)
 
 Sub DisplayTimer_Timer
    Dim ChgLED, ii, jj, num, chg, stat, obj, NotFound

    ChgLED=Controller.ChangedLEDs(&Hffffffff, &Hffffffff)
	NotFound = False
    If Not IsEmpty(ChgLED)Then

		For ii=0 To UBound(chgLED)
			num=chgLED(ii, 0) : chg=chgLED(ii, 1) : stat=chgLED(ii, 2)
			If UseFlexDMD then 
				If num < 32 Then
					if FlexDMDDict.Exists (stat) then
						'if character is known add to array for display
						'this buffers the digits to stop random characters on dmd when segmnent display scrolls
						FlexDigits(num) = stat
					Else
						'FlexDigits(num) = 0
						NotFound = True
					End If
				End If
			End If

			If DesktopMode = True Then
				if (num < 32) then
					For Each obj In Digits(num)
						If chg And 1 Then obj.State=stat And 1
						chg=chg\2 : stat=stat\2
					Next
				Else
			    end if
			End if
		Next

		If UseFlexDMD Then
			If NotFound = False Then 
				'all characters are known, update the dmd
				FlexDMD.LockRenderThread
					With FlexDMDScene
						For jj = 0 To 31
							.GetImage("Seg" & CStr(jj)).Bitmap = FlexDMD.NewImage("", FlexDMDDict.Item (FlexDigits(jj))).Bitmap
						Next
					End With
				FlexDMD.UnlockRenderThread
			End If
		End If
	End If

 End Sub
'**********************************************************************************************************
'**********************************************************************************************************


'*********************************************************************
'                 Start of VPX Functions
'*********************************************************************\


'**********Sling Shot Animations
' Rstep and Lstep  are the variables that increment the animation
'****************
Dim RStep, Lstep

Sub RightSlingShot_Slingshot
	vpmTimer.PulseSw 22
    PlaySound SoundFX("right_slingshot",DOFContactors), 0,1, 0.05,0.05 '0,1, AudioPan(RightSlingShot), 0.05,0,0,1,AudioFade(RightSlingShot)
    RSling.Visible = 0
    RSling1.Visible = 1
    sling1.TransZ = -20
    RStep = 0
    RightSlingShot.TimerEnabled = 1
End Sub

Sub RightSlingShot_Timer
    Select Case RStep
        Case 3:RSLing1.Visible = 0:RSLing2.Visible = 1:sling1.TransZ = -10
        Case 4:RSLing2.Visible = 0:RSLing.Visible = 1:sling1.TransZ = 0:RightSlingShot.TimerEnabled = 0
    End Select
    RStep = RStep + 1
End Sub

Sub LeftSlingShot_Slingshot
	vpmTimer.PulseSw 21
    PlaySound SoundFX("left_slingshot",DOFContactors), 0,1, -0.05,0.05 '0,1, AudioPan(LeftSlingShot), 0.05,0,0,1,AudioFade(LeftSlingShot)
    LSling.Visible = 0
    LSling1.Visible = 1
    sling2.TransZ = -20
    LStep = 0
    LeftSlingShot.TimerEnabled = 1
End Sub

Sub LeftSlingShot_Timer
    Select Case LStep
        Case 3:LSLing1.Visible = 0:LSLing2.Visible = 1:sling2.TransZ = -10
        Case 4:LSLing2.Visible = 0:LSLing.Visible = 1:sling2.TransZ = 0:LeftSlingShot.TimerEnabled = 0
    End Select
    LStep = LStep + 1
End Sub


'*********************************************************************
'                 Positional Sound Playback Functions
'*********************************************************************

' Play a sound, depending on the X,Y position of the table element (especially cool for surround speaker setups, otherwise stereo panning only)
' parameters (defaults): loopcount (1), volume (1), randompitch (0), pitch (0), useexisting (0), restart (1))
' Note that this will not work (currently) for walls/slingshots as these do not feature a simple, single X,Y position
Sub PlayXYSound(soundname, tableobj, loopcount, volume, randompitch, pitch, useexisting, restart)
	PlaySound soundname, loopcount, volume, AudioPan(tableobj), randompitch, pitch, useexisting, restart, AudioFade(tableobj)
End Sub

' Similar subroutines that are less complicated to use (e.g. simply use standard parameters for the PlaySound call)
Sub PlaySoundAt(soundname, tableobj)
    PlaySound soundname, 1, 1, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtBall(soundname)
    PlaySoundAt soundname, ActiveBall
End Sub


'*********************************************************************
'                     Supporting Ball & Sound Functions
'*********************************************************************

Function AudioFade(tableobj) ' Fades between front and back of the table (for surround systems or 2x2 speakers, etc), depending on the Y position on the table. "table1" is the name of the table
	Dim tmp
    tmp = tableobj.y * 2 / table1.height-1
    If tmp > 0 Then
		AudioFade = Csng(tmp ^10)
    Else
        AudioFade = Csng(-((- tmp) ^10) )
    End If
End Function

Function AudioPan(tableobj) ' Calculates the pan for a tableobj based on the X position on the table. "table1" is the name of the table
    Dim tmp
    tmp = tableobj.x * 2 / table1.width-1
    If tmp > 0 Then
        AudioPan = Csng(tmp ^10)
    Else
        AudioPan = Csng(-((- tmp) ^10) )
    End If
End Function

Function Vol(ball) ' Calculates the Volume of the sound based on the ball speed
    Vol = Csng(BallVel(ball) ^2 / 5000)
End Function

Function Pitch(ball) ' Calculates the pitch of the sound based on the ball speed
    Pitch = BallVel(ball) * 20
End Function

Function BallVel(ball) 'Calculates the ball speed
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2) ) )
End Function

'*****************************************
'      JP's VP10 Rolling Sounds
'*****************************************

Const tnob = 5 ' total number of balls
ReDim rolling(tnob)
InitRolling

Sub InitRolling
    Dim i
    For i = 0 to tnob
        rolling(i) = False
    Next
End Sub

Sub RollingTimer_Timer()
    Dim BOT, b
    BOT = GetBalls

	' stop the sound of deleted balls
    For b = UBound(BOT) + 1 to tnob
        rolling(b) = False
        StopSound("fx_ballrolling" & b)
    Next

	' exit the sub if no balls on the table
    If UBound(BOT) = -1 Then Exit Sub

	' play the rolling sound for each ball

    For b = 0 to UBound(BOT)
      If BallVel(BOT(b) ) > 1 Then
        rolling(b) = True
        if BOT(b).z < 30 Then ' Ball on playfield
          PlaySound("fx_ballrolling" & b), -1, Vol(BOT(b) ), AudioPan(BOT(b) ), 0, Pitch(BOT(b) ), 1, 0, AudioFade(BOT(b) )
        Else ' Ball on raised ramp
          PlaySound("fx_ballrolling" & b), -1, Vol(BOT(b) )*.5, AudioPan(BOT(b) ), 0, Pitch(BOT(b) )+50000, 1, 0, AudioFade(BOT(b) )
        End If
      Else
        If rolling(b) = True Then
          StopSound("fx_ballrolling" & b)
          rolling(b) = False
        End If
      End If
 ' play ball drop sounds
        If BOT(b).VelZ < -1 and BOT(b).z < 55 and BOT(b).z > 27 Then 'height adjust for ball drop sounds
            PlaySound "fx_ball_drop" & b, 0, ABS(BOT(b).velz)/17, AudioPan(BOT(b)), 0, Pitch(BOT(b)), 1, 0, AudioFade(BOT(b))
        End If
    Next
End Sub

'**********************
' Ball Collision Sound
'**********************

Sub OnBallBallCollision(ball1, ball2, velocity)
	PlaySound("fx_collide"), 0, Csng(velocity) ^2 / 2000, AudioPan(ball1), 0, Pitch(ball1), 0, 0, AudioFade(ball1)
End Sub


'*****************************************
'	ninuzzu's	FLIPPER SHADOWS
'*****************************************

sub FlipperTimer_Timer()
	FlipperLSh.RotZ = LeftFlipper.currentangle
	FlipperRSh.RotZ = RightFlipper.currentangle

    LFLogo.RotY = LeftFlipper.CurrentAngle
    RFlogo.RotY = RightFlipper.CurrentAngle

End Sub

'*****************************************
'	ninuzzu's	BALL SHADOW
'*****************************************
Dim BallShadow
BallShadow = Array (BallShadow1,BallShadow2,BallShadow3,BallShadow4,BallShadow5)

Sub BallShadowUpdate_timer()
    Dim BOT, b
    BOT = GetBalls
    ' hide shadow of deleted balls
    If UBound(BOT)<(tnob-1) Then
        For b = (UBound(BOT) + 1) to (tnob-1)
            BallShadow(b).visible = 0
        Next
    End If
    ' exit the Sub if no balls on the table
    If UBound(BOT) = -1 Then Exit Sub
    ' render the shadow for each ball
    For b = 0 to UBound(BOT)
		BallShadow(b).X = BOT(b).X
		ballShadow(b).Y = BOT(b).Y + 10                       
        If BOT(b).Z > 20 and BOT(b).Z < 140 Then
            BallShadow(b).visible = 1
        Else
            BallShadow(b).visible = 0
        End If
if BOT(b).z > 30 Then 
ballShadow(b).height = BOT(b).Z - 20
ballShadow(b).opacity = 110
Else
ballShadow(b).height = BOT(b).Z - 24
ballShadow(b).opacity = 90
End If
    Next	
End Sub



'************************************
' What you need to add to your table
'************************************

' a timer called RollingTimer. With a fast interval, like 10
' one collision sound, in this script is called fx_collide
' as many sound files as max number of balls, with names ending with 0, 1, 2, 3, etc
' for ex. as used in this script: fx_ballrolling0, fx_ballrolling1, fx_ballrolling2, fx_ballrolling3, etc


'******************************************
' Explanation of the rolling sound routine
'******************************************

' sounds are played based on the ball speed and position

' the routine checks first for deleted balls and stops the rolling sound.

' The For loop goes through all the balls on the table and checks for the ball speed and 
' if the ball is on the table (height lower than 30) then then it plays the sound
' otherwise the sound is stopped, like when the ball has stopped or is on a ramp or flying.

' The sound is played using the VOL, AUDIOPAN, AUDIOFADE and PITCH functions, so the volume and pitch of the sound
' will change according to the ball speed, and the AUDIOPAN & AUDIOFADE functions will change the stereo position
' according to the position of the ball on the table.


'**************************************
' Explanation of the collision routine
'**************************************

' The collision is built in VP.
' You only need to add a Sub OnBallBallCollision(ball1, ball2, velocity) and when two balls collide they 
' will call this routine. What you add in the sub is up to you. As an example is a simple Playsound with volume and paning
' depending of the speed of the collision.


Sub Pins_Hit (idx)
	PlaySound "pinhit_low", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 0, 0, AudioFade(ActiveBall)
End Sub

Sub Targets_Hit (idx)
	PlaySound "target", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 0, 0, AudioFade(ActiveBall)
End Sub

Sub Metals_Thin_Hit (idx)
	PlaySound "metalhit_thin", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Metals_Medium_Hit (idx)
	PlaySound "metalhit_medium", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Metals2_Hit (idx)
	PlaySound "metalhit2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Gates_Hit (idx)
	PlaySound "gate4", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Spinner_Spin
	PlaySound "fx_spinner", 0, .25, AudioPan(Spinner), 0.25, 0, 0, 1, AudioFade(Spinner)
End Sub

Sub Rubbers_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 20 then 
		PlaySound "fx_rubber2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End if
	If finalspeed >= 6 AND finalspeed <= 20 then
 		RandomSoundRubber()
 	End If
End Sub

Sub Posts_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
		PlaySound "fx_rubber2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
 		RandomSoundRubber()
 	End If
End Sub

Sub RandomSoundRubber()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound "rubber_hit_1", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 2 : PlaySound "rubber_hit_2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 3 : PlaySound "rubber_hit_3", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End Select
End Sub

Sub LeftFlipper_Collide(parm)
 	RandomSoundFlipper()
End Sub

Sub RightFlipper_Collide(parm)
 	RandomSoundFlipper()
End Sub

Sub RandomSoundFlipper()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound "flip_hit_1", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 2 : PlaySound "flip_hit_2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 3 : PlaySound "flip_hit_3", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End Select
End Sub

Sub Table1_Exit()
	Controller.Pause = False
	Controller.Stop
	If UseFlexDMD then
		If Not FlexDMD is Nothing Then 
			FlexDMD.Show = False
			FlexDMD.Run = False
			FlexDMD = NULL
		End if
		Controller.Games(cGameName).Settings.Value("showpindmd") = ExternalEnabled
	End if
End Sub

'*****************************
' Flex DMD Display - scutters
'*****************************
Dim FlexDMD
DIm FlexDMDDict
Dim FlexDMDScene
Dim ExternalEnabled
Dim FlexDigits(31)

Sub FlexDMD_Init() 'default/startup values

	' flex dmd variables
	DIm FlexDMDFont
	Dim FlexPath

	' populate the lookup dictionary for mapping display characters
	FlexDictionary_Init

	Set FlexDMD = CreateObject("FlexDMD.FlexDMD")
	If Not FlexDMD is Nothing Then
		
		FlexDMD.GameName = cGameName
		FlexDMD.TableFile = Table1.Filename & ".vpx"
		FlexDMD.RenderMode = 2
		FlexDMD.Width = 128
		FlexDMD.Height = 32
		FlexDMD.Clear = True
		FlexDMD.Run = True

		FlexDMD.LockRenderThread

		Set FlexDMDScene = FlexDMD.NewGroup("Scene")

		With FlexDMDScene
		
			'populate background 
			.AddActor FlexDMD.NewFrame("Frame")
			.GetFrame("Frame").Visible = True
			Select Case FlexColour
			Case 1
				.GetFrame("Frame").FillColor = vbCyan
				.GetFrame("Frame").BorderColor = vbCyan
			Case 2
				.GetFrame("Frame").FillColor = vbGreen
				.GetFrame("Frame").BorderColor = vbGreen
			Case 3
				.GetFrame("Frame").FillColor = RGB(255,128,0)
				.GetFrame("Frame").BorderColor = RGB(255,128,0)
			Case 4
				.GetFrame("Frame").FillColor = vbWhite
				.GetFrame("Frame").BorderColor = vbWhite
			Case Else		
				.GetFrame("Frame").FillColor = vbBlue
				.GetFrame("Frame").BorderColor = vbBlue
			End Select
			.GetFrame("Frame").Height = 32
			.GetFrame("Frame").Width= 128
			.GetFrame("Frame").Fill= True
			.GetFrame("Frame").Thickness= 1

			'32 segment display holders
			dim i 
			For i = 0 to 15
				'line 1
				.AddActor FlexDMD.NewImage("Seg" & cstr(i), "VPX.DMD_Space")
				.GetImage("Seg" & cstr(i)).SetAlignedPosition i * 8,0,0
				'line 2
				.AddActor FlexDMD.NewImage("Seg" & cstr(i + 16), "VPX.DMD_Space")
				.GetImage("Seg" & cstr(i + 16)).SetAlignedPosition i * 8,16,0
			Next 

		End With
	
		FlexDMD.Stage.AddActor FlexDMDScene
		FlexDMD.Show = True
		FlexDMD.UnlockRenderThread

		DisplayTimer.Interval = 30

	Else
		
		UseFlexDMD = 0
	
	End If

End Sub


Sub FlexDictionary_Init

	Set FlexDMDDict = CreateObject("Scripting.Dictionary")

	FlexDMDDict.Add 0, "VPX.DMD_Space"

	FlexDMDDict.Add 63, "VPX.DMD_0"
	FlexDMDDict.Add 6, "VPX.DMD_1"
	FlexDMDDict.Add 2139, "VPX.DMD_2"
	FlexDMDDict.Add 2127, "VPX.DMD_3"
	FlexDMDDict.Add 2150, "VPX.DMD_4"
	FlexDMDDict.Add 2157, "VPX.DMD_5"
	FlexDMDDict.Add 2173, "VPX.DMD_6"
	FlexDMDDict.Add 7, "VPX.DMD_7"
	FlexDMDDict.Add 2175,"VPX.DMD_8"
	FlexDMDDict.Add 2151,"VPX.DMD_9"

	FlexDMDDict.Add 32959,"VPX.DMD_0C"
	FlexDMDDict.Add 32902, "VPX.DMD_1C"
	FlexDMDDict.Add 35035, "VPX.DMD_2C"
	FlexDMDDict.Add 35023, "VPX.DMD_3C"
	FlexDMDDict.Add 35046, "VPX.DMD_4C"
	FlexDMDDict.Add 35053, "VPX.DMD_5C"
	FlexDMDDict.Add 35069, "VPX.DMD_6C"
	FlexDMDDict.Add 32903, "VPX.DMD_7C"
	FlexDMDDict.Add 35071, "VPX.DMD_8C"
	FlexDMDDict.Add 35047, "VPX.DMD_9C"
	
	FlexDMDDict.Add 2167, "VPX.DMD_A"
	FlexDMDDict.Add 10767, "VPX.DMD_B"
	FlexDMDDict.Add 57, "VPX.DMD_C"
	FlexDMDDict.Add 8719, "VPX.DMD_D"
	FlexDMDDict.Add 121, "VPX.DMD_E"
	FlexDMDDict.Add 113, "VPX.DMD_F"
	FlexDMDDict.Add 2109, "VPX.DMD_G"
	FlexDMDDict.Add 2166, "VPX.DMD_H"
	FlexDMDDict.Add 8713, "VPX.DMD_I"
	FlexDMDDict.Add 30, "VPX.DMD_J"
	FlexDMDDict.Add 5232, "VPX.DMD_K"
	FlexDMDDict.Add 56, "VPX.DMD_L"
	FlexDMDDict.Add 1334, "VPX.DMD_M"
	FlexDMDDict.Add 4406, "VPX.DMD_N"
	FlexDMDDict.Add 2163, "VPX.DMD_P"
	FlexDMDDict.Add 4159, "VPX.DMD_Q"
	FlexDMDDict.Add 6259, "VPX.DMD_R"
	FlexDMDDict.Add 8705, "VPX.DMD_T"
	FlexDMDDict.Add 62, "VPX.DMD_U"
	FlexDMDDict.Add 17456, "VPX.DMD_V"
	FlexDMDDict.Add 20534, "VPX.DMD_W"
	FlexDMDDict.Add 21760, "VPX.DMD_X"
	FlexDMDDict.Add 9472, "VPX.DMD_Y"
	FlexDMDDict.Add 17417, "VPX.DMD_Z"

	FlexDMDDict.Add 50224, "VPX.DMD_Vd"
	FlexDMDDict.Add 54528, "VPX.DMD_Xd"
	FlexDMDDict.Add 34934, "VPX.DMD_Hd"
	FlexDMDDict.Add 34925, "VPX.DMD_5d"
	FlexDMDDict.Add 41473, "VPX.DMD_Td"
	FlexDMDDict.Add 41487, "VPX.DMD_Dd"
	FlexDMDDict.Add 32825, "VPX.DMD_Cd"


	FlexDMDDict.Add 17408, "VPX.DMD_Space"'"VPX.DMD_FSlash"
	FlexDMDDict.Add 8, "VPX.DMD_Space"'"VPX.DMD_Underscore"
	FlexDMDDict.Add 2112, "VPX.DMD_Minus"
	FlexDMDDict.Add 16640, "VPX.DMD_Space"'"VPX.DMD_GreaterThan"
	FlexDMDDict.Add 5120, "VPX.DMD_Space"'"VPX.DMD_LessThan"
	FlexDMDDict.Add 32768, "VPX.DMD_Space"' "VPX.DMD_Dot"
	FlexDMDDict.Add 256, "VPX.DMD_Space"'"VPX.DMD_ApostB"
	FlexDMDDict.Add 1024, "VPX.DMD_Space"'"VPX.DMD_Apost"
	FlexDMDDict.Add 10816, "VPX.DMD_Plus"
	FlexDMDDict.Add 10861, "VPX.DMD_Space"'"VPX.DMD_Dollar" 'dollar can appear as transitional character
	FlexDMDDict.Add 10243, "VPX.DMD_Question"
	FlexDMDDict.Add 32639, "VPX.DMD_Question"  'match, all segments lit
	
End sub

